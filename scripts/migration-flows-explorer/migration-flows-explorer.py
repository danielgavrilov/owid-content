# %%
from string import Template
import pandas as pd
from os import path
import textwrap

outfile = "../../explorers/migration-flows.explorer.tsv"

datafile_url = "https://raw.githubusercontent.com/owid/importers/migration/migration/output/Migration_matrix.csv"

# %%


def slug(str):
    return str.replace(" ", "").lower()


def substitute_title(row, country_name):
    # Rows can include placeholders like ${country} and ${country_slug}, which will be replaced with the actual country name here.
    country_slug = slug(country_name)
    for key in row.keys():
        if isinstance(row[key], str):
            template = Template(row[key])
            row[key] = template.substitute(
                country=country_name,
                country_slug=country_slug,
            )
    return row


# %%
with open("migration-flows.template.tsv", "r") as templateFile:
    template = Template(templateFile.read())
views_df = pd.read_csv("views-per-country.csv", dtype=str)
column_defs_df = pd.read_csv("column-defs.tsv", sep="\t", dtype=str)

datafile = pd.read_csv(datafile_url)
available_entities = datafile["entity"].unique()

print(f"ðŸ“‘ Read {len(views_df.index)} different views")
print(f"ðŸ’¾ Data file has {len(available_entities)} entities")

# %%
graphers_list = []

for country in available_entities:
    for (idx, row) in views_df.iterrows():
        graphers_list.append(
            substitute_title(
                row.copy(),
                country,
            ),
        )

graphers = pd.DataFrame(columns=views_df.columns, data=graphers_list)

print(f"ðŸ“ˆ Generated {len(graphers.index)} views")

# %%
columns_list = [
    {"slug": "year", "name": "Year", "type": "Year"},
    {"slug": "entity", "name": "Country", "type": "EntityName"}
]

for country in available_entities:
    for (idx, row) in column_defs_df.iterrows():
        columns_list.append(
            substitute_title(
                row.copy(),
                country,
            ),
        )

columns = pd.DataFrame(columns=column_defs_df.columns, data=columns_list)

for (idx, row) in columns.iterrows():
    if row["transform"]:
        continue
    col_slug = row["slug"]
    assert col_slug in datafile.columns, f"Column {col_slug} not found in data file"
# %%
graphers_tsv = graphers.to_csv(sep="\t", index=False)
graphers_tsv_indented = textwrap.indent(graphers_tsv, "\t")

columns_tsv = columns.to_csv(sep="\t", index=False)
columns_tsv_indented = textwrap.indent(columns_tsv, "\t")

# %%
warning = "# DO NOT EDIT THIS FILE BY HAND. It is automatically generated using a set of input files. Any changes made directly to it will be overwritten.\n\n"

with open(outfile, "w", newline="\n") as f:
    f.write(
        warning
        + template.substitute(
            graphers_tsv=graphers_tsv_indented,
            column_defs=columns_tsv_indented
        )
    )

    print(f"ðŸ’¾ Explorer config written to {path.abspath(outfile)}")
