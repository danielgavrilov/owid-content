# %%
from os import path
from string import Template
import textwrap
import pandas as pd
import re


def file_url(tableSlug):
    return f"https://files.ourworldindata.org/data/unwpp-unstable/{tableSlug}.csv"


# %%
def substitute_rows(row):
    # Rows can include placeholders like ${sex__slug}, which will be replaced here
    for key in row.keys():
        if isinstance(row[key], str):
            while "${" in row[key]:
                template = Template(row[key])
                row[key] = template.substitute(**row)
    return row


def table_def(tableSlug, cols):
    col_defs = [f"{col}\t{col}\tNumeric" for col in cols]
    col_defs = textwrap.indent("\n".join(col_defs), "\t")

    return f"""table	{file_url(tableSlug)}	{tableSlug}
columns	{tableSlug}
	slug	name	type
	location	Country name	EntityName
	year	Year	Year
{col_defs}"""


# %%
outfile = "../../explorers/demography.explorer.tsv"

# %%
# Read inputs
with open("demography-explorer.template.tsv", "r") as templateFile:
    template = Template(templateFile.read())
input_files = ["metrics", "sex", "age_group", "projection"]
input_df = {
    file: pd.read_csv(f"{file}.csv", dtype=str, keep_default_na=False)
    for file in input_files
}
df = input_df["metrics"]

# %%
for merge_col in input_files[1:]:
    explode_col = "_" + merge_col
    df[explode_col] = df[explode_col].apply(lambda x: x.split(" "))
    df = df.explode(explode_col)
    merge_df = input_df[merge_col]
    merge_df.columns = merge_col + "__" + merge_df.columns.values
    df = df.merge(
        merge_df,
        how="left",
        left_on=explode_col,
        right_on=merge_col + "__slug",
        validate="many_to_one",
        indicator=merge_col + "__merge",
    )
    assert df[merge_col + "__merge"].isin(["both"]).all()
    df = df.drop([explode_col, merge_col + "__merge"], axis=1)

# %%

df = df.apply(substitute_rows, axis=1)
for col in ["title", "subtitle"]:
    df[col] = (
        df[col]
        .apply(lambda x: x.strip())
        .apply(lambda x: x[0].upper() + x[1:] if len(x) else x)
        .apply(lambda x: re.sub(" {2,}", " ", x))
    )

col_rename = {
    "title": "title",
    "Metric Dropdown": "Metric Dropdown",
    "sex__name": "Sex Dropdown",
    "age_group__name": "Age group Dropdown",
    "projection__name": "Projection Scenario Radio",
    "ySlugs": "ySlugs",
    "subtitle": "subtitle",
    "tableSlug": "tableSlug",
    "type": "type",
}
df = df[col_rename.keys()].rename(columns=col_rename)

# %%
tables = df["tableSlug"].unique()
table_defs = [
    table_def(tableSlug, df[df["tableSlug"] == tableSlug]["ySlugs"])
    for tableSlug in tables
]

# %%
# %%
graphers_tsv = df.to_csv(sep="\t", index=False)
graphers_tsv_indented = textwrap.indent(graphers_tsv, "\t")

table_defs = "\n".join(table_defs)

# %%
warning = "# DO NOT EDIT THIS FILE BY HAND. It is automatically generated using a set of input files. Any changes made directly to it will be overwritten.\n\n"

with open(outfile, "w", newline="\n") as f:
    f.write(
        warning
        + template.substitute(
            graphers_tsv=graphers_tsv_indented,
            table_defs=table_defs,
        )
    )

    print(f"ðŸ’¾ Explorer config written to {path.abspath(outfile)}")

# %%
